★★★★sort시 cmp를 잘 이용할 것★★★★

최소힙(오름차순) priority_queue<int, vector<int>, greater<int>> pq;

배열 최대값 찾기 algorithm헤더 *max_element(배열시작,끝)

vector<int> a(26); // 26칸짜리 생성 (a[26]) 가로로 26..
vector<int> a[26]; // 2차원 배열같이 세로로 늘어날 수 있는 배열의 주소 26개 생성?
                      a[0].push_back() 혹은 a->push_back() 이렇게 접근하면 a[0]에 생기고.. a[1].push_back()하면 a[1]에 생김
vector<vector<int> > a(node) //a[node][]배열껍데기
vector<vector<int> > a(node, vector<int>(node,0)) // a[node][node] 0초기화배열

int->string // to_string(int) string헤더
string->int // int to = atoi(string.c_str())

중복제거 vec.erase(unique(vec.begin(),vec.end()),vec.end());

다음 순열 next_permutation(arr.begin(), arr.end())

숫자인지 판별 isdigit()

배열에서 중복값의 시작과 끝을 찾는것 lower_bound, upper_bound

멀티셋 multiset<type> mset; 자동 정렬, 삽입삭제 용이
- 첫 원소를 지우려면 mset.erase(mset.begin()), 마지막 원소를 지우려면 auto it = mset.end(); it--; mset.erase(it);

fill() 사용법 (vector로 선언하면 시작이 a.begin(), 정적배열이면 a)
1차원 : fill(a,a+N,0) //0으로 초기화
2차원 : for(int i=0;i<N;i++)fill(a[i],a[i]+N,0)
